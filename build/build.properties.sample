######################################################################## 
# 
# When starting a new project, this file MUST be set up for use as
# how it should be used on the continuous integration server.   
#
########################################################################


# Where should the modules be retrieved from? 
# This reads and loads the modules one by one to remove any problems
# with dependencies between modules. Just make sure they're 
# in the file in the order they should be loaded...
modules.depends.file=build/dependent-modules

# The core modules for silverstripe
modules.core.file=build/core-modules

db.config=build/configs/silverstripe/local.conf.sample.php
testing.config=build/configs/silverstripe/testing.conf.sample.php
htaccess.config=build/configs/silverstripe/htaccess.sample

# change this to the value that appears AFTER the TLD in your url 
# the below matches http://localhost/silverstripe
rewrite.base=/silverstripe

# DB information
db.type=SQLiteDatabase
db.user=dbuser
db.pass=dbpass
db.name=silverstripe
db.host=localhost

admin.username=admin
admin.password=admin

# Configuration details for the testing database. It is expected
# that all other properties are the same
testing.db.name=tmpdb_silverstripe_testing

# Configuration details for how the output of the testing should be managed - PhingXMLPHPUnit3ResultFormatter
testing.reporter=CliTestReporter
testing.logdir=ssautesting/logs
testing.logfile=testsuite.xml

testcase=

git.branch=master

build.output.dir=build
build.archive.dir=${build.output.dir}/archive
patches.dir=build/patches

# Module package information
module.name=${phing.project.name}
module.prefix=
# assume that the module VERSION file exists - if not, this just has a blank for module.version
module.file=${build.output.dir}/${module.prefix}${module.name}-${module.version}-module.${DSTAMP}.tar.gz

# The name of the tarball to create when packaging
# Note that these are output to the scripts folder so they are inaccessible from the web
# via .htaccess rules
package.name=${phing.project.name}-deploy.${BUILD_STAMP}.tar.gz
phing-package.name=${phing.project.name}-development.${BUILD_STAMP}.tar.gz
update-package.name=${phing.project.name}-update.${BUILD_STAMP}.tar.gz
themes-package.name=${phing.project.name}-themes.${BUILD_STAMP}.tar.gz

backup.dir=backups
backup.sql=${backup.dir}/${phing.project.name}.${DSTAMP}.sql

# Comma separated list of all places that will be deployed to
# limited to stage to begin with, pass -Ddeploy.targets=prod,stage etc for more
deploy.targets=stage

# Host to deploy to
deploy.stage.host=localhost

# user to deploy as
deploy.stage.user=deploy

# password for that user; if this property is commented out, you will be prompted for this 
deploy.stage.pass=deploy

# Key based authentication. Note that at the moment, keys must be passwordless.
deploy.stage.privkey=
deploy.stage.pubkey=

# The path on the remote system to store deployments at. You then must link to 
# ${deploy.stage.path}/current as your webroot folder eg 
#
# ln -s ${deploy.stage.path} /var/www 
# 
# if your webroot is /var/www
deploy.stage.path=/home/deploy/stage/${phing.project.name}

# The group that apache runs as on the target
deploy.stage.apache-group=www-data

# eg a prod host might look like
# deploy.prod.host=localhost
# deploy.prod.user=deploy
# deploy.prod.pass=deploy
# deploy.prod.path=/home/deploy/prod/${phing.project.name}
